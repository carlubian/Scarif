@page "/app"
@using Microsoft.AspNetCore.SignalR.Client
@using Scarif.Server.Client.Core
@using Scarif.Protobuf
@implements IDisposable
@inject UpdateService Update
@inject NavigationManager NavManager

<h1>@AppName Logs</h1>

<p>These are the recorded logs for the @AppName App.</p>

<div class="container-fluid">
    <div class="row">
        <div class="col-1" />
        <div class="col-4">

            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="checkTrace"
                       checked="@checkedTrace" @onchange="_ => SeverityChanged(nameof(checkedTrace))">
                <label class="form-check-label" for="checkTrace">Trace</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="checkInfo"
                       checked="@checkedInfo" @onchange="_ => SeverityChanged(nameof(checkedInfo))">
                <label class="form-check-label" for="checkInfo">Info</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="checkWarning"
                       checked="@checkedWarning" @onchange="_ => SeverityChanged(nameof(checkedWarning))">
                <label class="form-check-label" for="checkWarning">Warning</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="checkError"
                       checked="@checkedError" @onchange="_ => SeverityChanged(nameof(checkedError))">
                <label class="form-check-label" for="checkError">Error</label>
            </div>

        </div>
        <div class="col-2" />
        <div class="col-4">

            <form class="form-inline" onsubmit="return false;">
                <input type="text" class="form-control mb-2 mr-sm-2" id="formComponent"
                       @bind="componentFilter" placeholder="Filter component name" />
                <button type="button" class="btn btn-primary mb-2"
                        @onclick="PopulateLogs">Filter</button>
            </form>
            
        </div>
        <div class="col-1" />
    </div>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th>Component</th>
            <th>Severity</th>
            <th>Timestamp</th>
            <th>Message</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var log in Logs)
        {
            <tr>
                <td>@log.Component.Replace(":", " > ")</td>
                <td><span class="@BadgeClassFromSeverity(log.Severity)">@log.Severity</span></td>
                <td>@log.Timestamp.ToDateTime().ToString("yyyy-MM-dd HH:mm:ss.fff")</td>
                <td>@log.Message</td>
            </tr>
        }
    </tbody>
</table>


@code {
    private HubConnection SignalR;
    public string? AppName;
    public string? AppUrl;

    public bool checkedTrace = false;
    public bool checkedInfo = true;
    public bool checkedWarning = true;
    public bool checkedError = true;
    public string componentFilter = "";

    public IEnumerable<LogMessage> Logs = new List<LogMessage>();

    protected override async Task OnInitializedAsync()
    {
        SignalR = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/scarif"))
            .Build();
        SignalR.On<string>("NotifyIncomingLog", HandleIncomingLog);
        await SignalR.StartAsync();

        await ParseQueryString();
        PopulateLogs();
        Update.Clear(AppName);
        Update.ActiveApp = AppName;
        NavManager.LocationChanged += HandleLocationChanged;
    }

    public async void PopulateLogs()
    {
        var severities = new[] { checkedTrace, checkedInfo, checkedWarning, checkedError };

        Logs = await SignalR.InvokeAsync<IEnumerable<LogMessage>>("RequestAppLogs", AppName, severities, 
            componentFilter.Trim().Equals("") ? null : componentFilter);
        StateHasChanged();
    }

    async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await ParseQueryString();
        if (AppUrl is "" || AppUrl is null)
            return;

        Logs = new List<LogMessage>();
        PopulateLogs();
        Update.Clear(AppName);
        Update.ActiveApp = AppName;
        StateHasChanged();
    }

    void HandleIncomingLog(string app)
    {
        if (app.Equals(AppName))
            PopulateLogs();
    }

    string BadgeClassFromSeverity(string severity)
    {
        switch (severity)
        {
            case "Trace":
                return "badge badge-secondary";
            case "Info":
                return "badge badge-info";
            case "Warning":
                return "badge badge-warning";
            case "Error":
                return "badge badge-danger";
            default:
                return "badge badge-light";
        }
    }

    public void SeverityChanged(string sevType)
    {
        if (sevType.Equals(nameof(checkedTrace)))
            checkedTrace = !checkedTrace;
        if (sevType.Equals(nameof(checkedInfo)))
            checkedInfo = !checkedInfo;
        if (sevType.Equals(nameof(checkedWarning)))
            checkedWarning = !checkedWarning;
        if (sevType.Equals(nameof(checkedError)))
            checkedError = !checkedError;

        PopulateLogs();
    }

    /// <summary>
    /// Method used to figure out which app are we on.
    /// </summary>
    /// <returns></returns>
    private async Task ParseQueryString()
    {
        NavManager.TryGetQueryString<string>("id", out AppUrl);
        if (AppUrl is "" || AppUrl is null)
            return;
        AppName = await SignalR.InvokeAsync<string>("AppNameFromUrl", AppUrl);
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }
}
