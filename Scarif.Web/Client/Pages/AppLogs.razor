@page "/appLogs"

@using Scarif.Core.Model
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading
@inject NavigationManager NavigationManager

<h2 class="text-xl md:text-4xl tracking-wide">@AppName</h2>

<p class="tracking-wide text-lg">
    The log list below can be filtered using the corresponding
    controls on the right side of the page. This view will refresh
    automatically every few seconds.
</p>
<p class="tracking-wide text-gray-400">Please allow a few seconds to populate the view when first navigating.</p>

<table class="table border-collapse w-full m-2 md:m-4">
    <thead>
        <tr class="border-b-2 border-yellow-600">
            <th>Timestamp</th>
            <th>Component</th>
            <th>Severity</th>
            <th>Message</th>
            <th>Properties</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var log in Logs)
        {
            <tr class="hover:bg-gray-700">
                <td>@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss.fff")</td>
                <td>@log.Component.Replace("\"", "").Replace(":", " \u1433 ").Replace(".", " \u1433 ")</td>
                <td class="@TrClassFromLog(log)">@log.Severity</td>
                <td>@log.Message</td>
                <td>
                    <ul>
                        @foreach (var prop in log.Properties)
                        {
                            <li>
                                <span class="text-gray-400 font-medium">@prop.Key:</span> 
                                <span>@prop.Value</span>
                            </li>
                        }
                    </ul>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    string AppId;
    string AppName;
    IEnumerable<Log> Logs = Enumerable.Empty<Log>();
    HubConnection SignalR;
    Timer QueryTimer;

    protected override async Task OnInitializedAsync()
    {
        var query = new Uri(NavigationManager.Uri).Query;
        if (QueryHelpers.ParseQuery(query).TryGetValue("AppId", out var appId))
            AppId = appId;

        SignalR = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/scarif"))
            .Build();

        await SignalR.StartAsync();
        QueryTimer = new Timer(async _ => await QueryLogs(), null, 500, 5000);
    }

    async Task QueryLogs()
    {
        AppName = await SignalR.InvokeAsync<string>("AppNameFromId", AppId);
        Logs = await SignalR.InvokeAsync<IEnumerable<Log>>("LogsForApp", AppId);

        StateHasChanged();
    }

    string TrClassFromLog(Log log)
    {
        return log.Severity.ToLowerInvariant() switch
        {
            "debug" => "font-medium",
            "trace" => "font-medium",
            "verbose" => "font-medium",
            "info" => "text-blue-300 font-medium",
            "information" => "text-blue-300 font-medium",
            "warning" => "text-yellow-300 font-medium",
            "error" => "text-red-300 font-medium",
            "fatal" => "text-red-300 font-medium",
            _ => ""
        };
    }
}
